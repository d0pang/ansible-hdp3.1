---
- name: Load default variables
  include_vars:
    file: '../defaults/main.yml'

- name: Load variables
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution|lower }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution|lower }}.yml"
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_os_family|lower }}.yml"
        - defaults.yml
      paths:
        - ../vars

- name: Install the ambari-server package
  package:
    name: ambari-server
    update_cache: yes
    state: latest
  notify: Reload systemd

- meta: flush_handlers

- block:
    - name: Install mysql database required packages (for hive embedded)
      package:
        name: "{{ item }}"
        update_cache: yes
        state: present
      with_items: "{{ mysql_packages }}"

    - name: Configure the Ambari JDBC driver for mysql (for hive embedded)
      shell: /usr/sbin/ambari-server setup --jdbc-db=mysql --jdbc-driver={{ mysql_jdbc_location }}
      notify: Restart ambari-server
  when: database == "embedded" and hiveserver_hosts is defined and hiveserver_hosts|length > 0

- block:
    - name: Install {{ database }} required packages
      package:
        name: "{{ item }}"
        update_cache: yes
        state: present
      with_items: "{{ hostvars[inventory_hostname][database + '_packages'] }}"

    - name: Create a .pgpass file
      template:
        src: pgpass.j2
        dest: /tmp/.pgpass-ambari
        mode: 0600
        force: yes
      when: database == "postgres"

    - name: Check if the postgres schema was already uploaded
      shell: "PGPASSFILE=/tmp/.pgpass-ambari psql -h {{ database_options.external_hostname|default(ansible_fqdn,true) }} -U {{ database_options.ambari_db_username }} -p {{ postgres_port }} -w -d {{ database_options.ambari_db_name }} -c 'select user_id from ambari.users limit 0;'"
      register: check_results
      ignore_errors: true
      when: database == "postgres"

    - name: Load the Ambari Server postgres schema
      shell: "PGPASSFILE=/tmp/.pgpass-ambari psql -h {{ database_options.external_hostname|default(ansible_fqdn,true) }} -U {{ database_options.ambari_db_username }} -p {{ postgres_port }} -w -d {{ database_options.ambari_db_name }} < /var/lib/ambari-server/resources/Ambari-DDL-Postgres-CREATE.sql"
      when: database == "postgres" and check_results|failed

    - name: Delete the .pgpass file
      file:
        dest: /tmp/.pgpass-ambari
        state: absent
      when: database == "postgres"

    - name: Load the Ambari Server mysql schema
      mysql_db:
        name: "{{ database_options.ambari_db_name }}"
        login_host: "{{ database_options.external_hostname|default(ansible_fqdn,true) }}"
        login_port: "{{ mysql_port }}"
        login_user: "{{ database_options.ambari_db_username }}"
        login_password: "{{ database_options.ambari_db_password }}"
        state: import
        target: /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sql
      register: import_results
      ignore_errors: true
      when: database == "mysql" or database == "mariadb"

    - name: Fail if the mysql schema could not be loaded
      fail:
        msg: Schema could not be loaded. Error is {{ import_results.msg }}!
      when: import_results|failed and not import_results.msg|search("Table .* already exists")

    - name: Configure the Ambari JDBC driver
      shell: /usr/sbin/ambari-server setup --jdbc-db={{ database | regex_replace('mariadb', 'mysql') }} --jdbc-driver={{ hostvars[inventory_hostname][database + '_jdbc_location'] }}
      notify: Restart ambari-server

    - name: Set the Ambari Server database setup options
      set_fact:
        ambari_database_options: "--database={{ database | regex_replace('mariadb', 'mysql') }} \
                                  --databasehost={{ database_options.external_hostname|default(ansible_fqdn,true) }} \
                                  --databaseport={{ hostvars[inventory_hostname][database | regex_replace('mariadb', 'mysql') + '_port'] }} \
                                  --databasename={{ database_options.ambari_db_name }} \
                                  --databaseusername={{ database_options.ambari_db_username }} \
                                  --databasepassword={{ database_options.ambari_db_password }}"
  when: database != "embedded"

- block:
  #'which java' and get '/usr/bin/java'
  - name: which java
    command: which java
    register: java_path

  #'ls -l' /user/bin/java' get 'lrwxrwxrwx. 1 root root 22 Nov  4 22:24 /usr/bin/java -> /etc/alternatives/java'
  - name: ls -l /usr/bin/java
    command: ls -l {{ java_path.stdout }}
    register: second_java_path

  #'ls -l' get 'lrwxrwxrwx. 1 root root 73 Nov  4 22:24 /etc/alternatives/java -> /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.161-0.b14.el7_4.x86_64/jre/bin/java'
  - name: find the second-layered link for java path
    command: ls -l {{ second_java_path.stdout.split()[-1] }}
    register: alternative_path

  - name: debug java path
    set_fact:
      full_path: "{{ alternative_path.stdout.split()[-1] }}"

  - name: debug java path
    set_fact:
      openjdk_path: "{{ full_path | regex_replace('jre.*', '')}}"

  - name: Set the Ambari Server Java setup option (OpenJDK)
    set_fact:
      ambari_java_options: "-j {{ openjdk_path }}"
  when: java == "openjdk"

- name: Set the Ambari Server Java setup option (Oracle JDK)
  set_fact:
    ambari_java_options: "-j {{ oraclejdk_options.base_folder }}/latest"
  when: java == "oraclejdk"

- name: Run Ambari Server setup
  shell: /usr/sbin/ambari-server setup -s {{ ambari_java_options|default("") }} {{ ambari_database_options|default("") }}
  notify: Restart ambari-server

- name: Increase the Ambari Server startup timeout
  lineinfile:
    dest: /etc/ambari-server/conf/ambari.properties
    state: present
    line: 'server.startup.web.timeout=120'
  notify: Restart ambari-server

- meta: flush_handlers

- name: Make sure the ambari-server service is started
  service:
    name: ambari-server
    state: started

- name: Make sure the ambari-server service is enabled
  service:
    name: ambari-server
    enabled: yes
  ignore_errors: true